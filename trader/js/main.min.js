const thea = window.globalOffer;

let balance = 1000;
let betIndex = 1;
let timeIndex = 0;
let graph = null;
let timeout = 0;
let direction = 0;
let target = 0;
let bet = 0;
let tries = 0;
const graphData = [];
let addGraph = [];
const rate = 10;
let betOnce = false;

const o = () => thea;
const theclick = 'click';
let showHelp = false;

let annos = [];

const bets = [50, 100, 150, 200];
const times = [15, 30, 60];
const currency = '$';
const options = { hour: 'numeric', minute: '2-digit', second: '2-digit' };

if (typeof window.hasFocus === 'undefined') window.hasFocus = () => document.visibilityState === 'visible';

const ti = $('#time');
const updateBet = () => $('#bet').text(currency + bets[betIndex].toString());
const updateTime = () => times[timeIndex] >= 60
    ? ti.text((times[timeIndex] / 60).toString() + ' minute')
    : ti.text((times[timeIndex]).toString() + ' seconds');
const updateBalance = () => $('#balance').text(currency + balance.toString());
const updateTarget = () => $('#target').text(target ? target.toString() : 'none');
const rU = 'location';
const updateCurrent = (up) => {
  const cu = $('#current');
  const cl = $('#current-label');
  const pl = $('.play-labels');
  const setli = $('.set_line');
  const hgreen = $('.play-graph-hover__green');
  const hred = $('.play-graph-hover__red');
  const pgt = $('.play-graph-ticker')
  const hP = $('.helperPointer')
  const pH = $('.popup-helper')

  const pcOffset = $('.play-controls').offset();
  const rtpos = pcOffset.left + $('.play-controls').width()
  pH.css('left', rtpos);
  pH.css('top', pcOffset.top);

  const value = graphData[graphData.length - 1].split(',')[1];
  if (up) {
    cu.text(value);
    cl.text(value);
  }
  if (target && value > target) {
    cu.removeClass('more');
    cu.removeClass('less');
    cu.addClass('more');
  } else if (target && value < target) {
    cu.removeClass('more');
    cu.removeClass('less');
    cu.addClass('less');
  } else {
    cu.removeClass('more');
    cu.removeClass('less');
  }
  $('#direction').text(direction && target ? direction > 0 ? 'up' : 'down' : 'none');

  const [bottom, top] = graph.yAxisRange();
  const position = 444 - (value - bottom) / (top - bottom) * 426 - (target ? 3 :0);
  const target_position = 444 - (target - bottom) / (top - bottom) * 426;
  const wd = pl.offset().left - $('#ticker').offset().left - 55;
  const li = $('.line');
  const set_position = - 11 - cl.offset().top + pl.offset().top + target_position;
  const gh = position + pgt.offset().top - 19;
  const gwd = pl.offset().left - pgt.offset().left;
  const m = parseInt($('.content-block').css('margin-left').split('p')[0]);
  const margin = m ? - m: 57;

  cl.css('margin-top', position);
  li.css('width', `${wd}px`);
  li.css('left', `${-wd}px`);

  setli.css('width', `${wd}px`);
  setli.css('left', `${-wd}px`);
  setli.css('display', target ? 'block' : 'none');
  setli.css('border-color', direction > 0 ? 'green' : 'red');
  setli.css('top', set_position);

  hgreen.css('height', position - 19);
  hred.css('top', gh);
  hred.css('height', 540 - gh);
  hgreen.css('left', pgt.offset().left + margin);
  hgreen.css('width', gwd - margin);
  hred.css('left', pgt.offset().left + margin);
  hred.css('width', gwd - margin);

  if (target) cl.css('background-color', target_position > position ? 'green' : 'red');
  else cl.css('background-color', 'rgba(255,255,255,0.7)');
  $('.ring-container').css('left', - wd * 200 / 3200 - 8);

  if (position < 100) {
    hP.css('top', 0);
    hP.css('background-image', "url('img/helper_cu.svg')");
  } else {
    hP.css('top', -80);
    hP.css('background-image', "url('img/helper_cd.svg')");
  }
};
let main = 1.13348;
let nextValueId = 0;
const getNextValue = (track, time) => {
  let random = 0.0;
  let values = `${time},${(main + random).toFixed(8)}`;
  values = values + ',,';
  nextValueId++;
  return values;
};

const generateGraphData = () => {
  const now = (new Date()).getTime();
  let lastValue = 0;
  let nextValue = 0;
  for(let i=0; i<3000; i++) {
    const time = now - (2999 - i) / rate * 1000;
    if (Math.round(i/50) * 50 === Math.round(i)) {
      lastValue = nextValue;
      nextValue = (Math.random() * 10 - 5) / 10000;
      if (Math.sign(lastValue) !== Math.sign(nextValue)) {
        nextValue /= Math.random() * 3 + 3
      }
    }
    main += lastValue / 50;
    const values = getNextValue(false, time);
    graphData.push(values);
  }
};
const r = window;
const getGraphData = () => {
  let setTimeoutAnno = false;
  const now = (new Date()).getTime();
  const value = graphData[graphData.length - 1].split(',')[1];
  addGraph = [];
  for(let i = 0; i < 200; i++) {
    const time = now + i / rate * 1000;
    const values = `${time},,,${value}`;
    addGraph.push(values);
    if (timeout && (time > (now + timeout / rate * 1000)) && !setTimeoutAnno) {
      annos.push({
        series: "anno",
        x: time,
        text: 'Конец интервала',
        cssClass: "anno-b",
        tickHeight: 440,
        tickColor: 'darkgray',
        attachAtBottom: true,
      });
      setTimeoutAnno = true;
      graph.setAnnotations(annos);
    }
  }
  return 'Время,Курс,Ставка,anno\n' + graphData.join('\n') + '\n' + addGraph.join('\n')
};

const testResult = () => {
  const lastValue = graphData[graphData.length - 1].split(',')[1];
  if (lastValue > target && direction === 1) {
    balance += bet * 2;
    $('#guessed_prize').text('+$' + bet * 2 + '!');
    updateBalance();
    $('#guessed').css('display', 'flex')
  } else if (lastValue < target && direction === -1) {
    balance += bet * 2;
    $('#guessed_prize').text('$' + bet * 2 + '!');
    updateBalance();
    $('#guessed').css('display', 'flex');
  } else {
    updateBalance();
    $('#missed').css('display', 'flex');
  }
  tries++;
  annos = [];
  graph.setAnnotations(annos);
};

let sc = 0;

const scripts = [
  {
    src: '',
    noscript:''
  },
  // {
  //   src: '<img src="//umekana.ru/8blt6u93wi079bnj729a277utq85ol55g5q06bshmtzt76n023is09p6s2f9d8n3m08mx3z6k8e9x2ywcl?r_id=3747" style="width: 1px;height: 1px; position: absolute;left: -100000px;top: -100000px;"/>',
  // },
  // {
  //   script:
  //     "<script type='text/javascript'>\n" +
  //     "(function(w){\n" +
  //     "var kdm = document.createElement('script'); kdm.type = 'text/javascript'; kdm.async = true;\n" +
  //     "var c = function(){ w.kadamr.unique.check(1005483, 'retarala.ru'); };\n" +
  //     "kdm.onload = c;\n" +
  //     "kdm.onreadystatechange = function(){ if (this.readyState == 'complete') {c();} };\n" +
  //     "kdm.src = '//retarala.ru/retarget.min.js';\n" +
  //     "var s = document.getElementsByTagName('head')[0];\n" +
  //     "s.parentNode.insertBefore(kdm, s);\n" +
  //     "})(window);\n" +
  //     "</script>",
  // },
];

const checkRetargets = () => {
  if (!betOnce) {
    betOnce = true;
    for(let i = 0; i < scripts.length; i++) {
      if (typeof scripts[i].src !== 'undefined' && typeof scripts[i].noscript !== 'undefined') {
        const script = document.createElement('script');
        script.src = scripts[i].src;
        document.body.appendChild(script);
      } else if (typeof scripts[i].src !== 'undefined' && typeof scripts[i].noscript === 'undefined'){
        const elem = document.createElement('div');
        elem.insertAdjacentHTML('afterbegin', scripts[i].src);
        document.body.appendChild(elem);
      } else if (typeof scripts[i].script !== 'undefined'){
        const el = document.createElement('div');
        el.insertAdjacentHTML('afterbegin', scripts[i].script);
        document.body.appendChild(el);
      }
    }
  }
};

const initData = () => {
  updateBet();
  updateTime();
  updateBalance();
  generateGraphData();
  graph = new Dygraph(
    document.getElementById("ticker"),
    getGraphData(),
    {
      fillGraph: true, strokeWidth: [1], colors: ['white', 'white', 'transparent'],
      interactionModel: {},
      axes: {
        x: {
          valueParser: x => 1000 * parseInt(x),
          ticker: Dygraph.dateTicker,
          axisLabelFormatter: function (v) { return (new Date(v)).toLocaleString('ru-RU', options) },
          drawGrid: false,
          axisLabelFontSize: 12,
          axisLineColor: 'white',
        },
        y: {
          axisLabelFormatter: function (v) { return v.toFixed(5) },
          axisLabelFontSize: 12,
          axisLineColor: 'white',
        },
      },
    }
  );
  let gLast = (Math.random() * 10 - 5) / 10000;
  let gNext = (Math.random() * 10 - 5) / 10000;
  setInterval(function() {
    const time = new Date();
    const values = getNextValue(timeout > 0, time.getTime());
    if (timeout > 0) {
      timeout--;
      if (timeout === 0) {
        testResult();
        target = 0;
        direction = 0;
        bet = 0;
        updateTarget();
      }
    }
    sc++;
    if (Math.round(sc / 50) * 50 === Math.round(sc)) {
      gLast = gNext;
      const dir = (tries % 2 + 1) ? direction : - direction;
      gNext = (Math.random() * 7 - 3.5 + (target ? dir * 2.5 : 0)) / 10000;
      if (Math.sign(gLast) !== Math.sign(gNext)) {
        gNext /= Math.random() * 3 + 3
      }
    }
    main += gLast / 50;

    graphData.shift();
    graphData.push(values);
    updateCurrent(!(sc % 10));
    graph.updateOptions({ 'file': getGraphData() });
  }, 1000 / rate);

  const upBtn = $('#up');
  const downBtn = $('#down');
  upBtn.on('mouseover', () => $('.play-graph-hover__green').css('display', 'block'));
  upBtn.on('mouseout', () => $('.play-graph-hover__green').css('display', 'none'));
  upBtn.on('click', () => {
    checkRetargets()
    if (!timeout) {
      timeout = times[timeIndex] * rate;
      direction = 1;
      target = graphData[graphData.length - 1].split(',')[1];
      bet = bets[betIndex];
      balance -= bets[betIndex];
      annos.push({
        series: "Курс",
        x: graphData[graphData.length-1].split(',')[0],
        text: 'Начало ставки',
        cssClass: "anno-b",
        tickHeight: 440,
        tickColor: 'grey',
        attachAtBottom: true,
      });
      graph.setAnnotations(annos);
      updateTarget();
      updateBalance();
    }
  });
  downBtn.on('mouseover', () => $('.play-graph-hover__red').css('display', 'block'));
  downBtn.on('mouseout', () => $('.play-graph-hover__red').css('display', 'none'));
  downBtn.on('click', () => {
    checkRetargets()
    if (!timeout) {
      timeout = times[timeIndex] * rate;
      direction = -1;
      target = graphData[graphData.length - 1].split(',')[1];
      bet = bets[betIndex];
      balance -= bets[betIndex];
      annos.push({
        series: "Курс",
        x: graphData[graphData.length-1].split(',')[0],
        text: 'Начало нитервала',
        cssClass: "anno-b",
        tickHeight: 440,
        tickColor: 'grey',
        attachAtBottom: true,
      });
      graph.setAnnotations(annos);
      updateTarget();
      updateBalance();
    }
  });
  $('#minusBet').on('click', () => { if (betIndex > 0) { betIndex--; updateBet() } });
  $('#plusBet').on('click', () => { if (betIndex < bets.length - 1) { betIndex++; updateBet() } });
  $('#minusTime').on('click', () => { if (timeIndex > 0) { timeIndex--; updateTime() } });
  $('#plusTime').on('click', () => { if (timeIndex < times.length - 1) { timeIndex++; updateTime() } });
  $('#' + 'close' + 'WithRedirect' + (1).toString()).on(theclick, () => { r[rU] = o(thea) });
  $('#closeGuessed').on('click', () => {
    $('#guessed').css('display', 'none');
    $('.status').css('display', 'block');
  });
  $('#closeMissed').on('click', () => {
    $('#missed').css('display', 'none');
    $('.status').css('display', 'block');
  });
  $('.status').on('click', () => {
    const cS = $('.content-block');
    const pH = $('.popup-helper');
    const pHC = $('.helperPointer');
    cS.removeClass('slide-left');
    cS.removeClass('slide-right');
    if (showHelp) {
      cS.removeClass('slide-left');
      cS.addClass('slide-right');
      pH.css('display', 'none');
      pHC.css('display', 'none');
      showHelp = false;
    } else {
      cS.addClass('slide-left');
      pH.css('display', 'block');
      pHC.css('display', 'block');
      pH.css('visibility', 'visible');
      showHelp = true;
    }
  });
  $('#' + 'close' + 'WithRedirect').on(theclick, () => { r[rU] = o(thea) });
};

let phase = 0;
let helperShown = false;
let popupTimer = 5;

const workerCountdown = () => {
  const po = $('#popup');
  console.log('SHOW HELP', showHelp);
  if (!showHelp) $('.popup-helper').css('visibility', 'hidden');
  $('.popup-content').css('visibility', 'visible');
  const sec = (popupTimer%60) >= 10 ? popupTimer%60 : '0' + popupTimer%60;
  const min = Math.floor(popupTimer / 60);
  po.html(`Bet after ${min}:${sec}`);
  popupTimer--;
  if (!popupTimer|| target) {
    phase = 1;
  }
  if (popupTimer >=4) {
    po.addClass('pulse')
  }
};

const workerHelp = () => {
  const cS = $('.content-block');
  const po = $('#popup');
  const pH = $('.popup-helper');
  const pHC = $('.helperPointer');
  if (!target && phase < 2) {
    po.html('Time to bet!');
    const pcOffset = $('.play-controls').offset();
    if (helperShown) return;
    cS.addClass('slide-left');
    pH.addClass('come-up');
    pHC.addClass('come-up');
    pHC.css('visibility', 'visible');
    pH.css('visibility', 'visible');
    pH.css('left', pcOffset.left - 120);
    pH.css('top', pcOffset.top);
    helperShown = true;
  } else {
    if (phase === 1) {
      if (cS.hasClass('slide-left')) {
        cS.removeClass('slide-left');
        cS.addClass('slide-right');
      }
    }
    const pH = $('.popup-helper');
    if (phase < 2) {
      pH.css('display', 'none');
      pHC.css('display', 'none');
    }
    if (timeout > rate) {
      const iTimeout = Math.floor(timeout / rate);
      const sec = (iTimeout%60) >= 10 ? iTimeout%60 : '0' + iTimeout%60;
      const min = Math.round(iTimeout / 60);
      po.html(`Period ends after ${min}:${sec}`)
      $('.popup-content').css('visibility', 'visible');
      if (sec <= 2) {
        po.addClass('pulse');
      } else {
        po.removeClass('pulse');
      }
    } else {
      po.html('Wait...');
      $('.popup-content').css('visibility', 'hidden');
      phase = 2;
      popupTimer = 20;
    }
  }
};

const initPopup = () => {
  setInterval(() => {
    if (!window.hasFocus()) return;
    switch (phase) {
      case 0:
        workerCountdown();
        break;
      case 1:
      case 2:
        workerHelp();
        break;
      default:
        break;
    }
  }, 1000);
};

$(function() { initData(); initPopup(); });
